% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spawn-glycans.R
\name{spawn_glycans_step}
\alias{spawn_glycans_step}
\alias{spawn_glycans}
\title{Apply Enzymes to Spawn Glycans}
\usage{
spawn_glycans_step(glycans, enzymes)

spawn_glycans(glycans, enzymes, n_steps = 10)
}
\arguments{
\item{glycans}{A \code{\link[glyrepr:glycan_structure]{glyrepr::glycan_structure()}}, or a character vector of
glycan structure strings supported by \code{\link[glyparse:auto_parse]{glyparse::auto_parse()}}.}

\item{enzymes}{A character vector of gene symbols,
or a list of \code{\link[=enzyme]{enzyme()}} objects.}

\item{n_steps}{The maximum number of rounds to perform.
The actual number of rounds may be less if no new glycans can be generated.}
}
\value{
A \code{\link[glyrepr:glycan_structure]{glyrepr::glycan_structure()}} vector of all unique glycans generated.
}
\description{
This function simulates the action of enzymes on glycans.
Think of it like a primordial soup where you put in a few glycans and enzymes,
and let them interact to generate new glycans.
}
\details{
\code{spawn_glycans_step()} performs one round of enzyme action,
while \code{spawn_glycans()} performs multiple rounds.
The only difference between \code{spawn_glycans_step()} and \code{spawn_glycans(n_steps = 1)}
is that the latter returns the original input glycans as well.
For both, a vector of unique glycan structures is returned.
}
\section{Important notes}{
\subsection{Inclusiveness}{

The algorithm takes an intentionally inclusive approach,
assuming that all possible isoenzymes capable of catalyzing
a given reaction may be involved.
Therefore, results should be interpreted with caution.

For example, in humans, detection of the motif "Neu5Ac(a2-3)Gal(b1-" will return
both "ST3GAL3" and "ST3GAL4". In reality, only one of them might be active, depending
on factors such as tissue specificity.
}

\subsection{Only "concrete" glycans}{

The function only works for glycans containing \strong{concrete} residues
(e.g., \code{"Glc"}, \code{"GalNAc"}), and not for glycans with \strong{generic}
residues (e.g., \code{"Hex"}, \code{"HexNAc"}).
}

\subsection{Incomplete glycan structures}{

If the glycan structure is incomplete or partially degraded,
the result may be misleading.
}
}

\examples{
# Use `spawn_glycans_step()` to build glycans step by step
glycan <- "GlcNAc(b1-2)Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(b1-"
glycan |>
  spawn_glycans_step("MGAT2") |>
  spawn_glycans_step("B4GALT1") |>
  spawn_glycans_step("ST3GAL3")

# Use `spawn_glycans()` to simulate a primordial soup
glycans <- c(
  "GlcNAc(b1-2)Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(b1-",
  "GlcNAc(b1-2)Man(a1-3)[GlcNAc(b1-2)Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(b1-"
)
enzymes <- c("B4GALT1", "ST3GAL3")
spawn_glycans(glycans, enzymes, n_steps = 5)

}
